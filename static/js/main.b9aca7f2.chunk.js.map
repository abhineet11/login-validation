{"version":3,"sources":["component/topHeader/TopHeader.js","component/login/Login.js","App.js","serviceWorker.js","index.js"],"names":["TopHeader","className","src","alt","href","Login","props","formState","errors","onInputChange","onInputBlur","type","email","length","placeholder","name","value","onBlur","onChange","id","password","onClick","loginHandler","App","useState","isLoading","setLoading","isAuth","setAuth","setErrors","setForm","validEmailRegex","RegExp","valid","errorState","isFormFilled","error","Object","values","forEach","val","console","log","checkValidity","fetch","then","res","json","data","catch","err","event","preventDefault","newForm","target","newErrors","errorMessage","test","emailValidity","passwordValidity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b9aca7f2.chunk.js","sourcesContent":["import React from 'react';\nimport './TopHeader.css'\n\nfunction TopHeader() {\n  return (\n    <header className=\"TopHeader\">\n        <div className=\"TopHeader-logo\">\n            <img src=\"https://www.healthifyme.com/blog/wp-content/uploads/2018/10/footer-logoR.png\" alt=\"logo\"/>\n        </div>\n        <nav className=\"TopHeader-nav\">\n            <a href=\"/\" >Accounts</a>\n        </nav>\n    </header>\n  );\n}\n\nexport default TopHeader;\n","import React from \"react\";\nimport \"./Login.css\";\nfunction Login(props) {\n    const {formState, errors, onInputChange, onInputBlur} = props\n\n  return (\n    <div className=\"Login\">\n      <div className=\"Login-top_section\">\n        <img\n          className=\"m-tb10\"\n          src=\"https://www.healthifyme.com/blog/wp-content/uploads/2018/10/footer-logoR.png\"\n          alt=\"logo\"\n        />\n        <p className=\"Login-label m-tb10\">Sign in</p>\n        <p className=\"Login-content m-tb10\">Use your Healthifyme Account</p>\n      </div>\n      <div className=\"Input-container\">\n        <input \n            type=\"text\" \n            className={errors && !errors.email.length  ? 'Input' : 'Input Input-error'} \n            placeholder=\"Enter Your Email\"\n            name=\"email\"\n            value={formState && formState.email}\n            onBlur={onInputBlur}\n            onChange={onInputChange}\n            id=\"input1\"\n        />  \n        <p className=\"Error\">{errors && errors.email}</p>\n      </div>\n\n      <div className=\"Input-container\">\n        <input\n          type=\"text\"\n          className={(errors && !errors.password.length)  ? 'Input' : 'Input Input-error'}\n          name=\"password\"\n          placeholder=\"Enter Your Password\"\n          value={formState && formState.password}\n          onBlur={onInputBlur}\n          onChange={onInputChange}\n          id=\"input2\"\n        />\n        <p className=\"Error\">{errors && errors.password}</p>\n      </div>\n\n      <div className=\"Button-container\">\n        <button className=\"Button\" onClick={props.loginHandler}>\n          Login\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TopHeader from \"./component/topHeader/TopHeader\";\nimport Login from \"./component/login/Login\";\n\nfunction App() {\n  const [isLoading, setLoading] = useState(false);\n  const [isAuth, setAuth] = useState(false);\n  const [errors, setErrors] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [formState, setForm] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const validEmailRegex = RegExp(\n    /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\n  );\n\n  const checkValidity = (error) => {\n    let valid = true;\n    Object.values(error).forEach((val) => {\n      console.log(error, val, \"val\");\n      val.length > 0 && (valid = false);\n    });\n    return valid;\n  };\n\n  const isFormFilled = () => {\n    let valid = true;\n    const { email, password } = formState;\n    const errorState = { ...errors };\n    if (!email.length) {\n      valid = false;\n      errorState[\"email\"] = \"This is a required field\";\n    }\n    if (!password.length) {\n      valid = false;\n      errorState[\"password\"] = \"This is a required field\";\n    }\n    setErrors(errorState);\n    return valid;\n  };\n\n  const loginHandler = () => {\n    if (isFormFilled()) {\n      if (checkValidity(errors)) {\n        setLoading(true);\n        fetch(\"http://www.mocky.io/v2/5d9d9219310000153650e30b\")\n          .then((res) => res.json())\n          .then((data) => {\n            setLoading(false);\n            setAuth(true);\n          })\n          .catch((err) => console.log(err, \"err\"));\n      }\n    }\n  };\n\n  const passwordValidity = (value) => {\n    let errorMessage = \"\";\n    if (!value.length) {\n      errorMessage = \"This is a required field\";\n    } else if (value.length < 6) {\n      errorMessage = \"Password must be 6 characters long!\";\n    }\n    return errorMessage;\n  };\n\n  const emailValidity = (value) => {\n    let errorMessage = \"\";\n    if (!value.length) {\n      errorMessage = \"This is a required field\";\n    } else if (value.length < 5) {\n      errorMessage = \"email must be 5 characters long!\";\n    } else if (!validEmailRegex.test(value)) {\n      errorMessage = \"Email is not valid!\";\n    }\n    return errorMessage;\n  };\n\n\n  const onInputBlur = (event) => {\n    const { name, value } = event.target;\n    const newErrors = { ...errors };\n    switch (name) {\n      case \"email\":\n        newErrors.email = emailValidity(value)\n        break;\n      case \"password\":\n        newErrors.password = passwordValidity(value);\n        break;\n      default:\n        break;\n    }\n    setErrors(newErrors);\n  };\n\n  const onInputChange = (event) => {\n    console.log(event)\n    event.preventDefault();\n    const newForm = { ...formState };\n    const { name, value } = event.target;\n    newForm[name] = value;\n    setForm(newForm);\n  };\n\n  return (\n    <div>\n      <TopHeader />\n      {!isLoading ? (\n        <main className=\"Container\">\n          {!isAuth && (\n            <Login\n              loginHandler={loginHandler}\n              formState={formState}\n              onInputChange={onInputChange}\n              onInputBlur={onInputBlur}\n              errors={errors}\n            />\n          )}\n          {isAuth && (\n            <div className=\"Loading\">\n              <h2>Weight loss begins with you and ends with HealthifyMe.</h2>\n            </div>\n          )}\n        </main>\n      ) : (\n        <div className=\"Loading\">\n          <img\n            src=\"https://wpamelia.com/wp-content/uploads/2018/11/ezgif-2-6d0b072c3d3f.gif\"\n            alt=\"loading\"\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}